---
description: Viber3D Coding Guidelines
globs:
alwaysApply: true
---

# R3F + Koota ECS Base Rules

## Core Architecture

- Use Koota ECS for all game logic.
- Keep React components purely presentational.
- Do not mix ECS logic and React rendering.

## Directory Structure
```
src/
├── components/  # React components for rendering
├── systems/     # ECS logic systems (pure TypeScript)
├── traits/      # Koota traits for data
├── utils/       # Utility helpers (math, data structures, etc.)
└── game/        # Core setup (world creation, scheduling, etc.)
```

## Important Guidelines

1. Systems must be stateless functions that query traits and update ECS data.
2. Components only render visuals; use `useTraitEffect` to reflect trait changes.
3. Traits hold data; avoid logic in them. Keep them minimal and typed.
4. Relationships (`relation()`) can be used for parent-child or referencing entities.
5. SoA vs AoS: Use schema-based traits for large numeric data, callback-based traits for complex objects.
6. Advanced Queries: Use partial selection (`.select(...)`) or specialized operators (`Not`, `Or`, `createAdded`, etc.) when needed.
7. Scheduling: If you have multiple systems, consider a scheduling approach so only relevant systems run in different states (e.g. paused vs. active).

## Anti-Patterns

- Do not place game logic in React hooks (e.g. `useFrame`), except for purely visual effects.
- Avoid storing ECS-related state in React state.
- Never mutate traits inside components. Use systems or actions instead.
- Do not initialize or destroy ECS entities directly in components (use an action or system).